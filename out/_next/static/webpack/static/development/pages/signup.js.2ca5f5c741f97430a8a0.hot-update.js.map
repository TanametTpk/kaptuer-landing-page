{"version":3,"file":"static/webpack/static/development/pages/signup.js.2ca5f5c741f97430a8a0.hot-update.js","sources":["webpack:///./layouts/Regis/index.js"],"sourcesContent":["import React, {useState} from 'react'\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\nimport GoogleLogin from 'react-google-login'\nimport { Form, Button, Row, Col, Container, Modal } from 'react-bootstrap'\nimport Loader from '../../components/Loader'\n\nimport { FB_TOKEN, GOOGLE_TOKEN } from '../../configs/oauth'\nimport api from '../../util/api'\nimport API from '../../configs/apis'\nimport signable from '../../util/api/libs/signable'\nimport { useFormHandle, useModal } from '../../util/hooks'\nimport {SeperateLine} from '../../components/SeperateLine'\nimport Validator from '../../util/api/libs/passwordValidator'\n\nimport Link from 'next/link'\n\nfunction Regis() {\n\n  const [user, handleFormChange] = useFormHandle({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [ showModal, openModal, closeModal ] = useModal(false)\n\n  const [isLoad, setLoad] = useState(false)\n  const [isClickSignup, setClickSignup] = useState(false)\n\n  const registration = async (payload, method) => {\n\n    setClickSignup(true)\n    if (payload.password !== payload.confirmpassword || !payload.name || !payload.email) return\n\n    if (!Validator.validate(payload.password)) {\n      openModal()\n      return\n    }\n\n    let res = await api.user.createUser(signable[method](payload))\n    if (res.status === 200) {\n\n      login(payload, method)\n\n    } else {\n      //something happen\n    }\n  }\n\n  const login = async (payload, method) => {\n\n    let res = await api.user.login(signable[method](payload), (err) => console.log(err))\n    if (res.status === 200){\n      window.location.href = API.APP;\n      setLoad(true)\n    }\n\n  }\n\n  if (isLoad) return <Loader />\n\n  return (\n    <Container className=\"login-box\">\n      <Row style={{ minWidth: \"35%\" }}>\n        <Col sm={12}>\n          <Form className=\"mx-3\">\n            <Form.Group controlId=\"formBasicName\">\n              <Form.Label>Your name</Form.Label>\n              <Form.Control isInvalid={ isClickSignup && !user.name} type=\"text\" name=\"name\" value={user.name} onChange={handleFormChange} placeholder=\"Enter name\" />\n              <Form.Control.Feedback type=\"invalid\">\n                please enter name\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control isInvalid={ isClickSignup && !user.email} type=\"email\" name=\"email\" value={user.email} onChange={handleFormChange} placeholder=\"Enter email\" />\n              <Form.Control.Feedback type=\"invalid\">\n                please enter email\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control isInvalid={ isClickSignup && user.confirmpassword && user.confirmpassword !== user.password} type=\"password\" name=\"password\" value={user.password} onChange={handleFormChange} placeholder=\"Password\" />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicConfirmPassword\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control isInvalid={ isClickSignup && user.confirmpassword && user.confirmpassword !== user.password} type=\"password\" name=\"confirmpassword\" value={user.confirmpassword} onChange={handleFormChange} placeholder=\"Confirm Password\" />\n              <Form.Control.Feedback type=\"invalid\">\n                password is not matched\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form>\n          <Row>\n            <Col className=\"d-flex flex-column\">\n              <Button className=\"mx-3 mb-2\" onClick={() => registration(user, \"LocalSign\")}>signup</Button>\n              <Link href=\"/\"><Button variant=\"outline-primary\" className=\"mx-3 mb-2\" >back to login</Button></Link>\n              <SeperateLine style={{margin:\" 12px 0\"}} />\n              <FacebookLogin\n                appId={FB_TOKEN}\n                autoLoad={false}\n                fields=\"name,email,picture\"\n                callback={(response) => login(response, \"FacebookSign\")}\n                render={renderProps => (\n                  <Button variant=\"facebook\" className=\"mx-3 mb-2\" onClick={renderProps.onClick}>login with Facebook</Button>\n                )}\n              />\n              <GoogleLogin\n                clientId={GOOGLE_TOKEN}\n                buttonText=\"Login with google\"\n                onSuccess={(response) => login(response, \"GoogleSign\")}\n                cookiePolicy={'single_host_origin'}\n                render={renderProps => (\n                  <Button variant=\"light\" className=\"mx-3 shadow-sm\" onClick={renderProps.onClick}>login with Google</Button>\n                )}\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      <Modal\n        show={showModal}\n        onHide={() => closeModal()}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Your password is too weak.\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Needed</h4>\n          <p>\n            password length between 8 - 100 characters,\n            at least 1 uppercase,\n            at least 1 lowercase,\n            at least 1 digit,\n            at lease 1 symbol\n            and no space\n          </p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => closeModal()}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n\n    </Container>\n  )\n}\n\nexport default Regis"],"mappings":"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","sourceRoot":""}