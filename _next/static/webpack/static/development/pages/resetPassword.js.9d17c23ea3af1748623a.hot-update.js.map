{"version":3,"file":"static/webpack/static\\development\\pages\\resetPassword.js.9d17c23ea3af1748623a.hot-update.js","sources":["webpack:///./pages/resetPassword.js"],"sourcesContent":["import React, {useState} from 'react'\r\nimport Card from '../components/Card'\r\nimport { connect } from 'react-redux'\r\nimport { resetPassword } from '../store/actions/user'\r\nimport { Form, Button, Toast } from 'react-bootstrap'\r\nimport { useFormHandle } from '../util/hooks'\r\nimport Router from 'next/router'\r\n\r\nconst index = (props) => {\r\n    \r\n    const [user, handleFormChange] = useFormHandle({\r\n        password: \"\",\r\n        confirmpassword: \"\",\r\n    });\r\n    const [isClick, setClick] = useState(false)\r\n    \r\n    const sendForgetPassword = async() => {\r\n\r\n        setClick(true)\r\n        if (!user.password || !user.confirmpassword || user.password !== user.confirmpassword) return\r\n\r\n        let { token } = props.query\r\n        props.resetPassword({password: user.password, token}, () => {\r\n            Router.push('/forgotPassword')\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{display:\"flex\" , justifyContent:\"center\" , alignItems:\"center\" , height:\"100vh\" , backgroundImage:\"linear-gradient(120deg, #a1c4fd 0%, #c2e9fb 100%)\"}}>\r\n            <Toast\r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    right: 0,\r\n                  }}\r\n            >\r\n                <Toast.Header closeButton={false}>\r\n                    <strong className=\"mr-auto\">Bootstrap</strong>\r\n                    <small>11 mins ago</small>\r\n                </Toast.Header>\r\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\r\n            </Toast>\r\n            <Card customStyle={{display:\"flex\" , flexDirection:\"column\" , justifyContent:\"center\" , alignItems:\"center\", minWidth:\"600px\" , padding:\"42px 42px\" , backgroundColor:\"white\" , borderRadius:\"20px\" }} >\r\n                \r\n                <h3 style={{marginBottom: '1.2em'}}>Reset Password</h3>\r\n                <Form style={{width:\"80%\"}}>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control isInvalid={ isClick && user.confirmpassword && user.confirmpassword !== user.password} type=\"password\" name=\"password\" value={user.password} onChange={handleFormChange} placeholder=\"Password\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicConfirmPassword\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control isInvalid={ isClick && user.confirmpassword && user.confirmpassword !== user.password} type=\"password\" name=\"confirmpassword\" value={user.confirmpassword} onChange={handleFormChange} placeholder=\"Confirm Password\" />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            password is not matched\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n                <div style={{display:\"flex\" , justifyContent:\"flex-end\" , width:\"80%\"}}>\r\n                    <Button className=\"mx-3 mb-2\" onClick={() => sendForgetPassword()}>\r\n                        Reset\r\n                    </Button>\r\n                </div>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nindex.getInitialProps = ({query}) => {\r\n    return {query}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    resetPassword\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(index)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}