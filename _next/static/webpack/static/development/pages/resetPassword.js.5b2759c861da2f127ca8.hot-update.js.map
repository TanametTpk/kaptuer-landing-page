{"version":3,"file":"static/webpack/static/development/pages/resetpassword.js.5b2759c861da2f127ca8.hot-update.js","sources":["webpack:///./pages/resetpassword.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Card from '../components/Card'\nimport { connect } from 'react-redux'\nimport { resetPassword } from '../store/actions/user'\nimport { Form, Button, Toast, Modal } from 'react-bootstrap'\nimport { useFormHandle, useInterval, useModal } from '../util/hooks'\nimport Router from 'next/router'\nimport Validator from '../util/api/libs/passwordValidator'\n\nconst index = (props) => {\n    \n    const [user, handleFormChange] = useFormHandle({\n        password: \"\",\n        confirmpassword: \"\",\n    });\n\n    const [ showModal, openModal, closeModal ] = useModal(false)\n\n    const [isClick, setClick] = useState(false)\n    const [currentTime, setCurrectTime] = useState(0)\n    const [ isTimeRunning , setTimeRunning ] = useState(true)\n    const end = Number(props.query.end || Date.now())\n\n    useInterval(() => {\n\n        let msLeft = end - Date.now()\n        if (msLeft < 0){\n            msLeft = 0\n            setTimeRunning(false)\n        }\n\n        let secLeft = Math.floor(msLeft / 1000)\n        setCurrectTime(secLeft)\n\n    }, isTimeRunning ? 1000 : null)\n\n    const sendForgetPassword = async() => {\n\n        setClick(true)\n        if (!user.password || !user.confirmpassword || user.password !== user.confirmpassword) return\n\n        if (!Validator.validate(user.password)) {\n            openModal()\n            return\n        }\n\n        let { token } = props.query\n        props.resetPassword({password: user.password, token});\n        Router.push('/')\n    }\n\n    return (\n        <div style={{display:\"flex\" , justifyContent:\"center\" , alignItems:\"center\" , height:\"100vh\" , backgroundImage:\"linear-gradient(120deg, #a1c4fd 0%, #c2e9fb 100%)\"}}>\n            <Toast\n                style={{\n                    position: 'absolute',\n                    top: 24,\n                    right: 24,\n                  }}\n            >\n                <Toast.Header closeButton={false}>\n                    <strong className=\"mr-auto\">Kaptuer</strong>\n                </Toast.Header>\n                <Toast.Body>\n                    { \n                        currentTime < 1 && isTimeRunning ? \n                        \"Estimating time....\" \n                        :\n                        (currentTime < 1 ? \"You can't reset password in this moment.\" : `You have ${currentTime} seconds left to reset password`)\n                    }\n                </Toast.Body>\n            </Toast>\n            <Card customStyle={{display:\"flex\" , flexDirection:\"column\" , justifyContent:\"center\" , alignItems:\"center\", minWidth:\"600px\" , padding:\"42px 42px\" , backgroundColor:\"white\" , borderRadius:\"20px\" }} >\n                \n                <h3 style={{marginBottom: '1.2em'}}>Reset Password</h3>\n                <Form style={{width:\"80%\"}}>\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control isInvalid={ isClick && user.confirmpassword && user.confirmpassword !== user.password} disabled={currentTime < 1} type=\"password\" name=\"password\" value={user.password} onChange={handleFormChange} placeholder=\"Password\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicConfirmPassword\">\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control isInvalid={ isClick && user.confirmpassword && user.confirmpassword !== user.password} disabled={currentTime < 1} type=\"password\" name=\"confirmpassword\" value={user.confirmpassword} onChange={handleFormChange} placeholder=\"Confirm Password\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            password is not matched\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form>\n\n                <div style={{display:\"flex\" , justifyContent:\"flex-end\" , width:\"80%\"}}>\n                    <Button className=\"mx-3 mb-2\" onClick={() => sendForgetPassword()} disabled={currentTime < 1} >\n                        Reset\n                    </Button>\n                </div>\n\n            </Card>\n            <Modal\n                show={showModal}\n                onHide={() => closeModal()}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Your password is too weak.\n                </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                <h4>Needed</h4>\n                <p>\n                    password length between 8 - 100 characters,\n                    at least 1 uppercase,\n                    at least 1 lowercase,\n                    at least 1 digit,\n                    at lease 1 symbol\n                    and no space\n                </p>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button onClick={() => closeModal()}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nindex.getInitialProps = ({query}) => {\n    return {query}\n}\n\nconst mapDispatchToProps = {\n    resetPassword\n}\n\nexport default connect(null, mapDispatchToProps)(index)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AANA;AACA;AADA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}